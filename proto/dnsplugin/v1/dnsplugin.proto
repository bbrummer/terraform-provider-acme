syntax = "proto3";

package dnsplugin.v1;

import "google/protobuf/duration.proto";

option go_package = "github.com/vancluever/terraform-provider-acme/proto/dnsplugin/v1";

// DNSProviderService is a protobuf wrapper for the acme DNS challenge API. This
// is designed to be used to wrap an instance of DNS providers in 
service DNSProviderService {
  // Configure needs to be called to initialize the provider and set the
  // configuration.
  rpc Configure(ConfigureRequest) returns (ConfigureResponse) {}

  // Present presents the DNS challenge TXT records to a DNS provider. This
  // wraps the lego Present call.
  rpc Present(PresentRequest) returns (PresentResponse) {}

  // Cleanup requests that DNS challenge TXT records be cleaned up. This wraps
  // the lego Cleanup call.
  rpc CleanUp(CleanUpRequest) returns (CleanUpResponse) {}

  // Timeout returns the provider's underlying timeout values. This wraps the
  // lego Timeout call.
  rpc Timeout(TimeoutRequest) returns (TimeoutResponse) {}

  // IsSequential probes the plugin to see if it implements lego's internal
  // sequential provider interfaces, which 1) indicates that it is a sequential
  // provider (the presence of the interface means the provider is sequential)
  // and 2) the duration of the interval between sequential queries. This is
  // used to signal to the ACME provider's own wrappers what interface to
  // present for the main plugin set.
  rpc IsSequential(IsSequentialRequest) returns (IsSequentialResponse) {}
}

message ConfigureRequest {
  string provider_name = 1;
  map<string, string> config = 2;
  repeated string recursive_nameservers = 3;
}

message ConfigureResponse {}

message PresentRequest {
  string domain = 1;
  string token = 2;
  string key_auth = 3;
}

message PresentResponse {}

message CleanUpRequest {
  string domain = 1;
  string token = 2;
  string key_auth = 3;
}

message CleanUpResponse {}

message TimeoutRequest {}

message TimeoutResponse {
  google.protobuf.Duration timeout = 1;
  google.protobuf.Duration interval = 2;
}

message IsSequentialRequest {}

message IsSequentialResponse {
  google.protobuf.Duration interval = 1;
  bool ok = 2;
}
